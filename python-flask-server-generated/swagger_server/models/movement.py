# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Movement(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, axis_name: str=None, axis_value: float=None, controller_type: float=None):  # noqa: E501
        """Movement - a model defined in Swagger

        :param axis_name: The axis_name of this Movement.  # noqa: E501
        :type axis_name: str
        :param axis_value: The axis_value of this Movement.  # noqa: E501
        :type axis_value: float
        :param controller_type: The controller_type of this Movement.  # noqa: E501
        :type controller_type: float
        """
        self.swagger_types = {
            'axis_name': str,
            'axis_value': float,
            'controller_type': float
        }

        self.attribute_map = {
            'axis_name': 'axis_name',
            'axis_value': 'axis_value',
            'controller_type': 'controller_type'
        }
        self._axis_name = axis_name
        self._axis_value = axis_value
        self._controller_type = controller_type

    @classmethod
    def from_dict(cls, dikt) -> 'Movement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Movement of this Movement.  # noqa: E501
        :rtype: Movement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def axis_name(self) -> str:
        """Gets the axis_name of this Movement.


        :return: The axis_name of this Movement.
        :rtype: str
        """
        return self._axis_name

    @axis_name.setter
    def axis_name(self, axis_name: str):
        """Sets the axis_name of this Movement.


        :param axis_name: The axis_name of this Movement.
        :type axis_name: str
        """

        self._axis_name = axis_name

    @property
    def axis_value(self) -> float:
        """Gets the axis_value of this Movement.


        :return: The axis_value of this Movement.
        :rtype: float
        """
        return self._axis_value

    @axis_value.setter
    def axis_value(self, axis_value: float):
        """Sets the axis_value of this Movement.


        :param axis_value: The axis_value of this Movement.
        :type axis_value: float
        """

        self._axis_value = axis_value

    @property
    def controller_type(self) -> float:
        """Gets the controller_type of this Movement.


        :return: The controller_type of this Movement.
        :rtype: float
        """
        return self._controller_type

    @controller_type.setter
    def controller_type(self, controller_type: float):
        """Sets the controller_type of this Movement.


        :param controller_type: The controller_type of this Movement.
        :type controller_type: float
        """

        self._controller_type = controller_type
